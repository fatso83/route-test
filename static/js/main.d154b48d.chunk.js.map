{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","headerController","handlers","handleButtonClick","handleInputFocus","api","setEventHandler","name","fn","length","TypeError","_loop","handler","_Object$keys","_i","e","Object","keys","freeze","Header","_ref","c","controls","react_default","a","createElement","className","react_router_dom","to","src","logo","alt","react_router","path","render","onClick","Fragment","onFocus","exact","concat","repeat","Bar","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","alert","preventDefault","React","PureComponent","size","addToggle","Foo","inputField","target","value","makeBig","style","fontSize","addEventListener","removeEventListener","once","App","App_Bar","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d154b48d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n// This object exposes the header event handler API and\n// can be passed down to sub-components to change what will\n// happen in the header when that component has been mounted\nconst headerController = (() => {\n  // our list of handlers\n  const handlers = {\n    handleButtonClick() {},\n    handleInputFocus() {}\n  };\n\n  // the api we will expose to our clients; a setter (used by the non-header-components) and the handlers (used by the header)\n  const api = {\n    setEventHandler(name, fn) {\n      if (!fn || fn.length < 1) {\n        throw new TypeError(\n          \"An event handler needs to be supplied: function(event) {...}\"\n        );\n      }\n\n      if (!(name in handlers)) {\n        throw new TypeError(\"Unknown event handler supplied\");\n      }\n\n      handlers[name] = fn;\n    }\n  };\n\n  // expose our handlers, but use a layer in-between\n  // This is to make it possible to directly reference a handler in the components\n  // while at the same time being sure that a change in the handler config will be reflected\n  for (const handler of Object.keys(handlers)) {\n    api[handler] = e => handlers[handler](e);\n  }\n\n  // Ensure no mutation will take place\n  return Object.freeze(api);\n})();\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header controls={headerController} />\n        <Route path=\"/bar\" render={() => <Bar controls={headerController} />} />\n        <Route path=\"/foo\" render={() => <Foo controls={headerController} />} />\n        <Route path=\"/\" exact render={() => <Link to=\"/bar\">Go to bar</Link>} />\n      </Router>\n      <p>This is the end, my friend</p>\n    </div>\n  );\n}\n\nfunction Header({ controls: c }) {\n  return (\n    <header className=\"App-header\">\n      <Link to=\"/\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </Link>\n      <Route\n        path=\"/bar\"\n        render={() => (\n          <p>\n            BarHeader\n            <button onClick={c.handleButtonClick}>Click me!</button>\n          </p>\n        )}\n      />\n      <Route\n        path=\"/foo\"\n        render={() => (\n          <>\n            <p>FooHeader</p>\n            <input onFocus={e => c.handleInputFocus(e)} />\n          </>\n        )}\n      />\n      <Route path=\"/\" exact render={() => `La-${\"la-\".repeat(10)}la`} />\n    </header>\n  );\n}\n\nclass Bar extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { setEventHandler } = props.controls;\n\n    setEventHandler(\"handleButtonClick\", event => {\n      alert(\"This is Barta!\");\n      event.preventDefault();\n    });\n    setEventHandler(\"handleInputFocus\", event => {\n      event.preventDefault();\n    });\n  }\n\n  render() {\n    return <Link to=\"/foo\">Please focus!\", said the Bar-tender</Link>;\n  }\n}\n\nlet size = 10;\nlet addToggle = true;\nfunction Foo(props) {\n  const { setEventHandler } = props.controls;\n\n  setEventHandler(\"handleInputFocus\", event => {\n    const inputField = event.target;\n    inputField.value = \"A Fooz pedal!\";\n\n    // increase the font size on every event\n    const makeBig = e => {\n      size = addToggle ? size + 10 : size - 10;\n      e.target.style.fontSize = size + \"px\";\n\n      if (size > 50) addToggle = false;\n      if (size < 11) addToggle = true;\n    };\n\n    const removeMakeBig = () => {\n      inputField.removeEventListener(\"keyup\", makeBig);\n    };\n\n    inputField.addEventListener(\"keyup\", makeBig);\n    inputField.addEventListener(\"blur\", removeMakeBig, { once: true }); // auto-cleanup\n  });\n\n  return <Link to=\"/\">\"I AM focused!\", said the Foo-baller</Link>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}